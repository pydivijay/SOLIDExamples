<svg viewBox="0 0 1400 1600" xmlns="http://www.w3.org/2000/svg">
  <defs>
    <linearGradient id="badGradient" x1="0%" y1="0%" x2="100%" y2="100%">
      <stop offset="0%" style="stop-color:#ff6b6b"/>
      <stop offset="100%" style="stop-color:#ffa500"/>
    </linearGradient>
    <linearGradient id="goodGradient" x1="0%" y1="0%" x2="100%" y2="100%">
      <stop offset="0%" style="stop-color:#4ecdc4"/>
      <stop offset="100%" style="stop-color:#44a08d"/>
    </linearGradient>
    <linearGradient id="baseClassGradient" x1="0%" y1="0%" x2="100%" y2="100%">
      <stop offset="0%" style="stop-color:#667eea"/>
      <stop offset="100%" style="stop-color:#764ba2"/>
    </linearGradient>
    <linearGradient id="benefitsGradient" x1="0%" y1="0%" x2="100%" y2="100%">
      <stop offset="0%" style="stop-color:#667eea"/>
      <stop offset="100%" style="stop-color:#764ba2"/>
    </linearGradient>
    <pattern id="violationPattern" patternUnits="userSpaceOnUse" width="8" height="8">
      <path d="M0,8 L8,0 M-2,2 L2,-2 M6,10 L10,6" stroke="#ff6b6b" stroke-width="2" opacity="0.3"/>
    </pattern>
    <filter id="shadow" x="-50%" y="-50%" width="200%" height="200%">
      <feDropShadow dx="0" dy="4" stdDeviation="4" flood-opacity="0.2"/>
    </filter>
    <marker id="arrowhead" markerWidth="10" markerHeight="7" refX="9" refY="3.5" orient="auto">
      <polygon points="0 0, 10 3.5, 0 7" fill="#2c3e50"/>
    </marker>
    <marker id="inheritanceArrow" markerWidth="12" markerHeight="12" refX="10" refY="6" orient="auto">
      <polygon points="0 3, 0 9, 10 6" fill="none" stroke="#2c3e50" stroke-width="2"/>
    </marker>
  </defs>
  <!-- Background -->
  <rect width="1400" height="1600" fill="#f8f9fa"/>
  <!-- Title -->
  <text x="700" y="50" text-anchor="middle" font-family="Arial, Helvetica, sans-serif" font-size="36" font-weight="300" fill="#2c3e50"> Liskov Substitution Principle (LSP) </text>
  <text x="700" y="85" text-anchor="middle" font-family="Arial, Helvetica, sans-serif" font-size="24" font-weight="300" fill="#2c3e50"> ASP.NET Core Document Storage API </text>
  <!-- Bad Example Section -->
  <rect x="50" y="120" width="620" height="450" rx="15" fill="url(#badGradient)" filter="url(#shadow)"/>
  <text x="360" y="155" text-anchor="middle" font-family="Arial, Helvetica, sans-serif" font-size="24" font-weight="bold" fill="#ffffff"> ❌ Violating LSP </text>
  <!-- Base Class (Bad) -->
  <rect x="80" y="180" width="560" height="80" rx="10" fill="rgba(255,255,255,0.3)" stroke="rgba(255,255,255,0.5)" stroke-width="2"/>
  <text x="360" y="210" text-anchor="middle" font-family="Arial, Helvetica, sans-serif" font-size="18" font-weight="bold" fill="#ffffff"> 📁 DocumentStorage (Base) </text>
  <text x="360" y="230" text-anchor="middle" font-family="Arial, Helvetica, sans-serif" font-size="12" fill="#ffffff"> UploadDocumentAsync() → Returns file path </text>
  <text x="360" y="245" text-anchor="middle" font-family="Arial, Helvetica, sans-serif" font-size="12" fill="#ffffff"> DownloadDocumentAsync(filePath) → Expects file path </text>
  <!-- Inheritance Arrows (Bad) -->
  <line x1="200" y1="260" x2="200" y2="290" stroke="#fff" stroke-width="2" marker-end="url(#inheritanceArrow)"/>
  <line x1="360" y1="260" x2="360" y2="290" stroke="#fff" stroke-width="2" marker-end="url(#inheritanceArrow)"/>
  <line x1="520" y1="260" x2="520" y2="290" stroke="#fff" stroke-width="2" marker-end="url(#inheritanceArrow)"/>
  <!-- Derived Classes (Bad) -->
  <rect x="80" y="300" width="160" height="100" rx="8" fill="url(#violationPattern)" stroke="#ff6b6b" stroke-width="2"/>
  <text x="160" y="320" text-anchor="middle" font-family="Arial, Helvetica, sans-serif" font-size="14" font-weight="bold" fill="#ffffff"> ☁️ AzureBlobStorage </text>
  <text x="160" y="340" text-anchor="middle" font-family="Arial, Helvetica, sans-serif" font-size="10" fill="#ffffff"> Returns URL instead </text>
  <text x="160" y="355" text-anchor="middle" font-family="Arial, Helvetica, sans-serif" font-size="10" fill="#ffffff"> of file path! 🚫 </text>
  <text x="160" y="375" text-anchor="middle" font-family="Arial, Helvetica, sans-serif" font-size="10" fill="#ffffff"> Expects URL format </text>
  <text x="160" y="390" text-anchor="middle" font-family="Arial, Helvetica, sans-serif" font-size="10" fill="#ffffff"> not file path! 🚫 </text>
  <rect x="280" y="300" width="160" height="100" rx="8" fill="url(#violationPattern)" stroke="#ff6b6b" stroke-width="2"/>
  <text x="360" y="320" text-anchor="middle" font-family="Arial, Helvetica, sans-serif" font-size="14" font-weight="bold" fill="#ffffff"> 📦 AwsS3Storage </text>
  <text x="360" y="340" text-anchor="middle" font-family="Arial, Helvetica, sans-serif" font-size="10" fill="#ffffff"> Returns S3 key </text>
  <text x="360" y="355" text-anchor="middle" font-family="Arial, Helvetica, sans-serif" font-size="10" fill="#ffffff"> instead of path! 🚫 </text>
  <text x="360" y="375" text-anchor="middle" font-family="Arial, Helvetica, sans-serif" font-size="10" fill="#ffffff"> Throws different </text>
  <text x="360" y="390" text-anchor="middle" font-family="Arial, Helvetica, sans-serif" font-size="10" fill="#ffffff"> exceptions! 🚫 </text>
  <rect x="480" y="300" width="160" height="100" rx="8" fill="url(#violationPattern)" stroke="#ff6b6b" stroke-width="2"/>
  <text x="560" y="320" text-anchor="middle" font-family="Arial, Helvetica, sans-serif" font-size="14" font-weight="bold" fill="#ffffff"> 💾 LocalStorage </text>
  <text x="560" y="340" text-anchor="middle" font-family="Arial, Helvetica, sans-serif" font-size="10" fill="#ffffff"> Works with file paths </text>
  <text x="560" y="355" text-anchor="middle" font-family="Arial, Helvetica, sans-serif" font-size="10" fill="#ffffff"> as expected ✓ </text>
  <text x="560" y="375" text-anchor="middle" font-family="Arial, Helvetica, sans-serif" font-size="10" fill="#ffffff"> But others don't!</text>
  <text x="560" y="390" text-anchor="middle" font-family="Arial, Helvetica, sans-serif" font-size="10" fill="#ffffff"> Not substitutable! 🚫 </text>
  <!-- Problems -->
  <rect x="90" y="420" width="540" height="130" rx="8" fill="rgba(0,0,0,0.2)"/>
  <text x="360" y="445" text-anchor="middle" font-family="Arial, Helvetica, sans-serif" font-size="16" font-weight="bold" fill="#ffffff"> ⚠️ LSP Violations </text>
  <text x="110" y="470" font-family="Arial, Helvetica, sans-serif" font-size="12" fill="#ffffff"> • Different return types (file paths vs URLs vs S3 keys) </text>
  <text x="110" y="485" font-family="Arial, Helvetica, sans-serif" font-size="12" fill="#ffffff"> • Inconsistent parameter expectations </text>
  <text x="110" y="500" font-family="Arial, Helvetica, sans-serif" font-size="12" fill="#ffffff"> • Different exception types and behaviors </text>
  <text x="110" y="515" font-family="Arial, Helvetica, sans-serif" font-size="12" fill="#ffffff"> • Cannot substitute implementations safely </text>
  <text x="110" y="530" font-family="Arial, Helvetica, sans-serif" font-size="12" fill="#ffffff"> • Client code breaks when switching providers </text>
  <!-- Good Example Section -->
  <rect x="730" y="120" width="620" height="450" rx="15" fill="url(#goodGradient)" filter="url(#shadow)"/>
  <text x="1040" y="155" text-anchor="middle" font-family="Arial, Helvetica, sans-serif" font-size="24" font-weight="bold" fill="#ffffff"> ✅ Following LSP </text>
  <!-- Abstract Base Class (Good) -->
  <rect x="760" y="180" width="560" height="80" rx="10" fill="url(#baseClassGradient)" filter="url(#shadow)"/>
  <text x="1040" y="210" text-anchor="middle" font-family="Arial, Helvetica, sans-serif" font-size="18" font-weight="bold" fill="#ffffff"> 📄 DocumentStorageBase (Abstract) </text>
  <text x="1040" y="230" text-anchor="middle" font-family="Arial, Helvetica, sans-serif" font-size="12" fill="#ffffff"> UploadDocumentAsync() → Returns UploadResult with DocumentId </text>
  <text x="1040" y="245" text-anchor="middle" font-family="Arial, Helvetica, sans-serif" font-size="12" fill="#ffffff"> DownloadDocumentAsync(documentId) → Consistent contract </text>
  <!-- Inheritance Arrows (Good) -->
  <line x1="880" y1="260" x2="880" y2="290" stroke="#fff" stroke-width="2" marker-end="url(#inheritanceArrow)"/>
  <line x1="1040" y1="260" x2="1040" y2="290" stroke="#fff" stroke-width="2" marker-end="url(#inheritanceArrow)"/>
  <line x1="1200" y1="260" x2="1200" y2="290" stroke="#fff" stroke-width="2" marker-end="url(#inheritanceArrow)"/>
  <!-- Derived Classes (Good) -->
  <rect x="760" y="300" width="160" height="100" rx="8" fill="rgba(255,255,255,0.2)" stroke="rgba(255,255,255,0.3)" stroke-width="2"/>
  <text x="840" y="320" text-anchor="middle" font-family="Arial, Helvetica, sans-serif" font-size="14" font-weight="bold" fill="#ffffff"> ☁️ AzureBlobStorage </text>
  <text x="840" y="340" text-anchor="middle" font-family="Arial, Helvetica, sans-serif" font-size="10" fill="#ffffff"> Returns consistent </text>
  <text x="840" y="355" text-anchor="middle" font-family="Arial, Helvetica, sans-serif" font-size="10" fill="#ffffff"> DocumentId ✓ </text>
  <text x="840" y="375" text-anchor="middle" font-family="Arial, Helvetica, sans-serif" font-size="10" fill="#ffffff"> Same exception types ✓ </text>
  <text x="840" y="390" text-anchor="middle" font-family="Arial, Helvetica, sans-serif" font-size="10" fill="#ffffff"> Fully substitutable ✓ </text>
  <rect x="960" y="300" width="160" height="100" rx="8" fill="rgba(255,255,255,0.2)" stroke="rgba(255,255,255,0.3)" stroke-width="2"/>
  <text x="1040" y="320" text-anchor="middle" font-family="Arial, Helvetica, sans-serif" font-size="14" font-weight="bold" fill="#ffffff"> 📦 AwsS3Storage </text>
  <text x="1040" y="340" text-anchor="middle" font-family="Arial, Helvetica, sans-serif" font-size="10" fill="#ffffff"> Returns consistent </text>
  <text x="1040" y="355" text-anchor="middle" font-family="Arial, Helvetica, sans-serif" font-size="10" fill="#ffffff"> DocumentId ✓ </text>
  <text x="1040" y="375" text-anchor="middle" font-family="Arial, Helvetica, sans-serif" font-size="10" fill="#ffffff"> Same behaviors ✓ </text>
  <text x="1040" y="390" text-anchor="middle" font-family="Arial, Helvetica, sans-serif" font-size="10" fill="#ffffff"> Fully substitutable ✓ </text>
  <rect x="1160" y="300" width="160" height="100" rx="8" fill="rgba(255,255,255,0.2)" stroke="rgba(255,255,255,0.3)" stroke-width="2"/>
  <text x="1240" y="320" text-anchor="middle" font-family="Arial, Helvetica, sans-serif" font-size="14" font-weight="bold" fill="#ffffff"> 💾 LocalStorage </text>
  <text x="1240" y="340" text-anchor="middle" font-family="Arial, Helvetica, sans-serif" font-size="10" fill="#ffffff"> Returns consistent </text>
  <text x="1240" y="355" text-anchor="middle" font-family="Arial, Helvetica, sans-serif" font-size="10" fill="#ffffff"> DocumentId ✓ </text>
  <text x="1240" y="375" text-anchor="middle" font-family="Arial, Helvetica, sans-serif" font-size="10" fill="#ffffff"> Same contract ✓ </text>
  <text x="1240" y="390" text-anchor="middle" font-family="Arial, Helvetica, sans-serif" font-size="10" fill="#ffffff"> Fully substitutable ✓ </text>
  <!-- Benefits -->
  <rect x="770" y="420" width="540" height="130" rx="8" fill="rgba(0,0,0,0.2)"/>
  <text x="1040" y="445" text-anchor="middle" font-family="Arial, Helvetica, sans-serif" font-size="16" font-weight="bold" fill="#ffffff"> ✅ LSP Compliance </text>
  <text x="790" y="470" font-family="Arial, Helvetica, sans-serif" font-size="12" fill="#ffffff"> • Consistent return types and behaviors </text>
  <text x="790" y="485" font-family="Arial, Helvetica, sans-serif" font-size="12" fill="#ffffff"> • Same exception handling patterns </text>
  <text x="790" y="500" font-family="Arial, Helvetica, sans-serif" font-size="12" fill="#ffffff"> • Perfect substitutability between implementations </text>
  <text x="790" y="515" font-family="Arial, Helvetica, sans-serif" font-size="12" fill="#ffffff"> • Client code works with any implementation </text>
  <text x="790" y="530" font-family="Arial, Helvetica, sans-serif" font-size="12" fill="#ffffff"> • Polymorphism works correctly </text>
  <!-- LSP Rule Section -->
  <rect x="50" y="600" width="1300" height="120" rx="15" fill="#2c3e50" filter="url(#shadow)"/>
  <text x="700" y="635" text-anchor="middle" font-family="Arial, Helvetica, sans-serif" font-size="24" font-weight="bold" fill="#ffffff"> 📏 LSP Golden Rule </text>
  <text x="700" y="665" text-anchor="middle" font-family="Arial, Helvetica, sans-serif" font-size="18" fill="#4ecdc4"> "Objects of a superclass should be replaceable with objects of its subclasses" </text>
  <text x="700" y="685" text-anchor="middle" font-family="Arial, Helvetica, sans-serif" font-size="18" fill="#4ecdc4"> "without breaking the application functionality" </text>
  <text x="700" y="710" text-anchor="middle" font-family="Arial, Helvetica, sans-serif" font-size="14" font-style="italic" fill="#95a5a6"> If you can't substitute a derived class for its base class, you're violating LSP </text>
  <!-- Substitution Test Section -->
  <rect x="50" y="750" width="620" height="200" rx="15" fill="#e74c3c" filter="url(#shadow)"/>
  <text x="360" y="785" text-anchor="middle" font-family="Arial, Helvetica, sans-serif" font-size="20" font-weight="bold" fill="#ffffff"> ❌ Substitution Test: FAILS </text>
  <!-- Code Example (Bad) -->
  <rect x="80" y="800" width="560" height="120" rx="8" fill="rgba(0,0,0,0.3)"/>
  <text x="100" y="825" font-family="Courier New, Consolas, monospace" font-size="12" fill="#ffffff"> var storage = new AzureBlobStorage(...); </text>
  <text x="100" y="845" font-family="Courier New, Consolas, monospace" font-size="12" fill="#ffffff"> string id = await storage.UploadDocumentAsync("file.pdf", stream); </text>
  <text x="100" y="865" font-family="Courier New, Consolas, monospace" font-size="12" fill="#ffffff"> // id = "https://blob.url/file.pdf" (URL, not path!) </text>
  <text x="100" y="885" font-family="Courier New, Consolas, monospace" font-size="12" fill="#ff6b6b"> var content = await storage.DownloadDocumentAsync(id); // BREAKS! 💥 </text>
  <text x="100" y="905" font-family="Courier New, Consolas, monospace" font-size="12" fill="#ff6b6b"> // LocalStorage expects file path, gets URL </text>
  <rect x="730" y="750" width="620" height="200" rx="15" fill="#27ae60" filter="url(#shadow)"/>
  <text x="1040" y="785" text-anchor="middle" font-family="Arial, Helvetica, sans-serif" font-size="20" font-weight="bold" fill="#ffffff"> ✅ Substitution Test: PASSES </text>
  <!-- Code Example (Good) -->
  <rect x="760" y="800" width="560" height="120" rx="8" fill="rgba(0,0,0,0.3)"/>
  <text x="780" y="825" font-family="Courier New, Consolas, monospace" font-size="12" fill="#ffffff"> var storage = new AzureBlobStorage(...); </text>
  <text x="780" y="845" font-family="Courier New, Consolas, monospace" font-size="12" fill="#ffffff"> var result = await storage.UploadDocumentAsync("file.pdf", stream); </text>
  <text x="780" y="865" font-family="Courier New, Consolas, monospace" font-size="12" fill="#ffffff"> // result.DocumentId = "doc_20241215_abc123.pdf" </text>
  <text x="780" y="885" font-family="Courier New, Consolas, monospace" font-size="12" fill="#4ecdc4"> var content = await storage.DownloadDocumentAsync(result.DocumentId); ✓ </text>
  <text x="780" y="905" font-family="Courier New, Consolas, monospace" font-size="12" fill="#4ecdc4"> // Works perfectly with any implementation! </text>
  <!-- Benefits Section -->
  <rect x="50" y="980" width="1300" height="280" rx="15" fill="url(#benefitsGradient)" filter="url(#shadow)"/>
  <text x="700" y="1015" text-anchor="middle" font-family="Arial, Helvetica, sans-serif" font-size="24" font-weight="bold" fill="#ffffff"> 🎯 Benefits of Following LSP </text>
  <!-- Benefits Grid -->
  <rect x="80" y="1040" width="380" height="100" rx="8" fill="rgba(255,255,255,0.1)"/>
  <rect x="76" y="1040" width="4" height="100" fill="#4ecdc4"/>
  <text x="90" y="1065" font-family="Arial, Helvetica, sans-serif" font-size="16" font-weight="bold" fill="#4ecdc4"> 🔄 Perfect Substitutability </text>
  <text x="90" y="1085" font-family="Arial, Helvetica, sans-serif" font-size="12" fill="#ffffff"> Any implementation can replace another without </text>
  <text x="90" y="1100" font-family="Arial, Helvetica, sans-serif" font-size="12" fill="#ffffff"> breaking client code or changing behavior </text>
  <text x="90" y="1115" font-family="Arial, Helvetica, sans-serif" font-size="12" fill="#ffffff"> Client depends on abstraction, not concretion </text>
  <text x="90" y="1130" font-family="Arial, Helvetica, sans-serif" font-size="12" fill="#ffffff"> True polymorphism and dependency inversion </text>
  <rect x="500" y="1040" width="380" height="100" rx="8" fill="rgba(255,255,255,0.1)"/>
  <rect x="496" y="1040" width="4" height="100" fill="#4ecdc4"/>
  <text x="510" y="1065" font-family="Arial, Helvetica, sans-serif" font-size="16" font-weight="bold" fill="#4ecdc4"> 🛡️ Reliability &amp; Robustness </text>
  <text x="510" y="1085" font-family="Arial, Helvetica, sans-serif" font-size="12" fill="#ffffff"> Consistent contracts and behaviors across all </text>
  <text x="510" y="1100" font-family="Arial, Helvetica, sans-serif" font-size="12" fill="#ffffff"> implementations prevent runtime surprises </text>
  <text x="510" y="1115" font-family="Arial, Helvetica, sans-serif" font-size="12" fill="#ffffff"> Same exception types and error handling </text>
  <text x="510" y="1130" font-family="Arial, Helvetica, sans-serif" font-size="12" fill="#ffffff"> Predictable behavior for all subclasses </text>
  <rect x="920" y="1040" width="380" height="100" rx="8" fill="rgba(255,255,255,0.1)"/>
  <rect x="916" y="1040" width="4" height="100" fill="#4ecdc4"/>
  <text x="930" y="1065" font-family="Arial, Helvetica, sans-serif" font-size="16" font-weight="bold" fill="#4ecdc4"> 🧪 Better Testing </text>
  <text x="930" y="1085" font-family="Arial, Helvetica, sans-serif" font-size="12" fill="#ffffff"> Unit tests written for base class work for all </text>
  <text x="930" y="1100" font-family="Arial, Helvetica, sans-serif" font-size="12" fill="#ffffff"> derived classes without modification </text>
  <text x="930" y="1115" font-family="Arial, Helvetica, sans-serif" font-size="12" fill="#ffffff"> Mock implementations work seamlessly </text>
  <text x="930" y="1130" font-family="Arial, Helvetica, sans-serif" font-size="12" fill="#ffffff"> Integration testing is more reliable </text>
  <rect x="80" y="1160" width="380" height="100" rx="8" fill="rgba(255,255,255,0.1)"/>
  <rect x="76" y="1160" width="4" height="100" fill="#4ecdc4"/>
  <text x="90" y="1185" font-family="Arial, Helvetica, sans-serif" font-size="16" font-weight="bold" fill="#4ecdc4"> 🚀 Easier Maintenance </text>
  <text x="90" y="1205" font-family="Arial, Helvetica, sans-serif" font-size="12" fill="#ffffff"> Changes in one implementation don't affect others </text>
  <text x="90" y="1225" font-family="Arial, Helvetica, sans-serif" font-size="12" fill="#ffffff"> Adding new implementations is risk-free </text>
  <text x="90" y="1245" font-family="Arial, Helvetica, sans-serif" font-size="12" fill="#ffffff"> Refactoring is safer and more predictable </text>
  <rect x="500" y="1160" width="380" height="100" rx="8" fill="rgba(255,255,255,0.1)"/>
  <rect x="496" y="1160" width="4" height="100" fill="#4ecdc4"/>
  <text x="510" y="1185" font-family="Arial, Helvetica, sans-serif" font-size="16" font-weight="bold" fill="#4ecdc4"> 🎭 True Polymorphism </text>
  <text x="510" y="1205" font-family="Arial, Helvetica, sans-serif" font-size="12" fill="#ffffff"> Runtime type switching works flawlessly </text>
  <text x="510" y="1225" font-family="Arial, Helvetica, sans-serif" font-size="12" fill="#ffffff"> Strategy pattern implementations are reliable </text>
  <text x="510" y="1245" font-family="Arial, Helvetica, sans-serif" font-size="12" fill="#ffffff"> Dependency injection works as expected </text>
  <rect x="920" y="1160" width="380" height="100" rx="8" fill="rgba(255,255,255,0.1)"/>
  <rect x="916" y="1160" width="4" height="100" fill="#4ecdc4"/>
  <text x="930" y="1185" font-family="Arial, Helvetica, sans-serif" font-size="16" font-weight="bold" fill="#4ecdc4"> 📈 Scalability </text>
  <text x="930" y="1205" font-family="Arial, Helvetica, sans-serif" font-size="12" fill="#ffffff"> Easy to add new storage providers </text>
  <text x="930" y="1225" font-family="Arial, Helvetica, sans-serif" font-size="12" fill="#ffffff"> Existing code doesn't need changes </text>
  <text x="930" y="1245" font-family="Arial, Helvetica, sans-serif" font-size="12" fill="#ffffff"> Architecture scales with business needs </text>
  <!-- Key Takeaways -->
  <rect x="50" y="1290" width="1300" height="120" rx="15" fill="#34495e" filter="url(#shadow)"/>
  <text x="700" y="1325" text-anchor="middle" font-family="Arial, Helvetica, sans-serif" font-size="22" font-weight="bold" fill="#ffffff"> 🎯 LSP Key Takeaways </text>
  <text x="100" y="1355" font-family="Arial, Helvetica, sans-serif" font-size="14" fill="#4ecdc4"> ✓ Derived classes must honor the contract of their base class </text>
  <text x="100" y="1375" font-family="Arial, Helvetica, sans-serif" font-size="14" fill="#4ecdc4"> ✓ Preconditions cannot be strengthened, postconditions cannot be weakened </text>
  <text x="100" y="1395" font-family="Arial, Helvetica, sans-serif" font-size="14" fill="#4ecdc4"> ✓ If you can't substitute derived for base, you're violating LSP </text>
  <text x="750" y="1355" font-family="Arial, Helvetica, sans-serif" font-size="14" fill="#4ecdc4"> ✓ Same exception types and behaviors across all implementations </text>
  <text x="750" y="1375" font-family="Arial, Helvetica, sans-serif" font-size="14" fill="#4ecdc4"> ✓ Consistent return types and method signatures </text>
  <text x="750" y="1395" font-family="Arial, Helvetica, sans-serif" font-size="14" fill="#4ecdc4"> ✓ Behavioral compatibility is more important than structural similarity </text>
  <!-- Footer -->
  <text x="700" y="1550" text-anchor="middle" font-family="Arial, Helvetica, sans-serif" font-size="14" font-style="italic" fill="#6c757d"> Liskov Substitution Principle - ASP.NET Core Document Storage API </text>
</svg>